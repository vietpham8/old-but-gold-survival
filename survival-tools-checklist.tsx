<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Old But Gold - Survival Checklist</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .scenario-card { transition: all 0.3s ease; }
        .scenario-card:hover { transform: translateY(-2px); }
        .checked-item { background-color: #f0fdf4; border-color: #86efac; }
        .priority-critical { color: #dc2626; font-weight: bold; }
        .priority-high { color: #ea580c; font-weight: 600; }
        .priority-medium { color: #ca8a04; }
        .priority-low { color: #6b7280; }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-50 to-slate-100">
    <div class="min-h-screen p-4">
        <div class="max-w-7xl mx-auto">
            <!-- Header -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div class="flex items-center gap-3 mb-3">
                    <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                    </svg>
                    <h1 class="text-3xl font-bold text-gray-800">Old But Gold - Survival Checklist</h1>
                </div>
                <p class="text-gray-600 text-sm mb-3">Danh s√°ch c√¥ng c·ª• sinh t·ªìn & k·ªπ nƒÉng truy·ªÅn th·ªëng cho m·ªçi t√¨nh hu·ªëng kh·∫©n c·∫•p</p>
                <div class="flex gap-2 flex-wrap">
                    <span class="px-3 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium">üõ†Ô∏è C√¥ng c·ª•</span>
                    <span class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium">üéØ K·ªπ nƒÉng</span>
                </div>
            </div>

            <!-- Filter Tabs -->
            <div class="bg-white rounded-xl shadow-lg p-4 mb-6">
                <h3 class="font-semibold text-gray-700 mb-3">Ch·ªçn t√¨nh hu·ªëng:</h3>
                <div id="scenarioTabs" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3"></div>
            </div>

            <!-- View Toggle -->
            <div class="bg-white rounded-xl shadow-lg p-4 mb-6">
                <div class="flex items-center justify-between">
                    <h3 class="font-semibold text-gray-700">Hi·ªÉn th·ªã:</h3>
                    <div class="flex gap-2">
                        <button onclick="setView('tools')" id="btnTools" class="px-4 py-2 rounded-lg font-medium transition-all">C√¥ng c·ª•</button>
                        <button onclick="setView('skills')" id="btnSkills" class="px-4 py-2 rounded-lg font-medium transition-all">K·ªπ nƒÉng</button>
                        <button onclick="setView('all')" id="btnAll" class="px-4 py-2 rounded-lg font-medium transition-all">T·∫•t c·∫£</button>
                    </div>
                </div>
            </div>

            <!-- Content -->
            <div id="content" class="space-y-6"></div>

            <!-- Footer -->
            <div class="mt-8 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-xl shadow-lg p-6">
                <h3 class="text-xl font-bold mb-3">üí° Nguy√™n t·∫Øc "Old But Gold"</h3>
                <div class="grid md:grid-cols-2 gap-4 text-sm">
                    <div>
                        <h4 class="font-bold mb-2">üõ†Ô∏è C√¥ng c·ª•:</h4>
                        <ul class="space-y-1">
                            <li>‚úÖ ƒê∆°n gi·∫£n - √çt h·ªèng h√≥c</li>
                            <li>‚úÖ ƒê·ªôc l·∫≠p - Kh√¥ng c·∫ßn ƒëi·ªán</li>
                            <li>‚úÖ ƒêa nƒÉng - Nhi·ªÅu m·ª•c ƒë√≠ch</li>
                            <li>‚úÖ B·ªÅn b·ªâ - D√πng l√¢u d√†i</li>
                        </ul>
                    </div>
                    <div>
                        <h4 class="font-bold mb-2">üéØ K·ªπ nƒÉng:</h4>
                        <ul class="space-y-1">
                            <li>‚úÖ C∆° b·∫£n - D·ªÖ h·ªçc, d·ªÖ nh·ªõ</li>
                            <li>‚úÖ Thi·∫øt y·∫øu - C·ª©u m·∫°ng</li>
                            <li>‚úÖ Kh√¥ng c·∫ßn c√¥ng c·ª• - D√πng tay kh√¥ng</li>
                            <li>‚úÖ Truy·ªÅn th·ªëng - ƒê√£ ƒë∆∞·ª£c ki·ªÉm ch·ª©ng</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ===== C·∫§U H√åNH T√åNH HU·ªêNG =====
        // Th√™m t√¨nh hu·ªëng m·ªõi v√†o ƒë√¢y
        const scenarios = {
            car: { name: "üöó Xe h∆°i", color: "blue" },
            home: { name: "üè† Gia ƒë√¨nh", color: "green" },
            outdoor: { name: "‚õ∞Ô∏è Ph∆∞·ª£t/R·ª´ng", color: "orange" },
            financial: { name: "üí∞ T√†i ch√≠nh", color: "purple" },
            flood: { name: "üåä L≈© l·ª•t", color: "cyan" },
            storm: { name: "üå™Ô∏è B√£o/M∆∞a", color: "indigo" },
            landslide: { name: "‚õ∞Ô∏è S·∫°t l·ªü", color: "amber" },
            war: { name: "‚öîÔ∏è Chi·∫øn tranh", color: "red" },
            evacuation: { name: "üèÉ S∆° t√°n", color: "yellow" },
            riot: { name: "üî• B·∫°o lo·∫°n", color: "rose" }
            // Th√™m t√¨nh hu·ªëng kh√°c t·∫°i ƒë√¢y...
        };

        // ===== DANH S√ÅCH C√îNG C·ª§ =====
        // Format: { name: "T√™n c√¥ng c·ª•", priority: "critical/high/medium/low", reason: "L√Ω do" }
        const tools = {
            car: [
                { name: "D√¢y c√°p k√≠ch ƒëi·ªán", priority: "critical", reason: "·∫Æc quy y·∫øu" },
                { name: "B·ªô d·ª•ng c·ª• s·ª≠a xe", priority: "critical", reason: "S·ª≠a ch·ªØa" },
                { name: "ƒê√®n pin + pin", priority: "critical", reason: "Chi·∫øu s√°ng" }
                // Th√™m c√¥ng c·ª• xe h∆°i kh√°c...
            ],
            home: [
                { name: "ƒê√®n pin quay tay", priority: "critical", reason: "C√∫p ƒëi·ªán" },
                { name: "N∆∞·ªõc ƒë√≥ng chai", priority: "critical", reason: "C√∫p n∆∞·ªõc" }
                // Th√™m c√¥ng c·ª• gia ƒë√¨nh kh√°c...
            ],
            outdoor: [
                { name: "Dao sinh t·ªìn", priority: "critical", reason: "Ch·∫∑t, t·ª± v·ªá" },
                { name: "B·∫≠t l·ª≠a", priority: "critical", reason: "ƒê·ªët l·ª≠a" }
                // Th√™m c√¥ng c·ª• ph∆∞·ª£t kh√°c...
            ],
            financial: [
                { name: "Ti·ªÅn m·∫∑t nh·ªè", priority: "critical", reason: "Kh√¥ng ATM" }
                // Th√™m c√¥ng c·ª• t√†i ch√≠nh kh√°c...
            ],
            flood: [
                { name: "Phao b∆°i/√Åo phao", priority: "critical", reason: "Tho√°t l≈©" }
                // Th√™m c√¥ng c·ª• l≈© l·ª•t kh√°c...
            ],
            storm: [
                { name: "BƒÉng keo d√°n c·ª≠a", priority: "critical", reason: "Ch·ªëng v·ª° k√≠nh" }
                // Th√™m c√¥ng c·ª• b√£o kh√°c...
            ],
            landslide: [
                { name: "X·∫ªng/Cu·ªëc", priority: "critical", reason: "ƒê√†o b·ªõi" }
                // Th√™m c√¥ng c·ª• s·∫°t l·ªü kh√°c...
            ],
            war: [
                { name: "T√∫i ba l√¥ kh·∫©n c·∫•p", priority: "critical", reason: "Di chuy·ªÉn nhanh" }
                // Th√™m c√¥ng c·ª• chi·∫øn tranh kh√°c...
            ],
            evacuation: [
                { name: "Gi·∫•y t·ªù t√πy th√¢n", priority: "critical", reason: "CMND, Passport" }
                // Th√™m c√¥ng c·ª• s∆° t√°n kh√°c...
            ],
            riot: [
                { name: "Kh·∫©u trang N95", priority: "critical", reason: "H∆°i cay" }
                // Th√™m c√¥ng c·ª• b·∫°o lo·∫°n kh√°c...
            ]
        };

        // ===== DANH S√ÅCH K·ª∏ NƒÇNG =====
        const skills = {
            car: [
                { name: "S∆° c·ª©u c∆° b·∫£n (CPR)", priority: "critical", reason: "C·ª©u ng∆∞·ªùi" },
                { name: "Thay l·ªëp xe", priority: "critical", reason: "L·ªëp x·∫πp" }
                // Th√™m k·ªπ nƒÉng xe h∆°i kh√°c...
            ],
            home: [
                { name: "S∆° c·ª©u Heimlich", priority: "critical", reason: "Ngh·∫πn th·ªü" },
                { name: "ƒêun n∆∞·ªõc kh·ª≠ tr√πng", priority: "high", reason: "Kh·ª≠ tr√πng" }
                // Th√™m k·ªπ nƒÉng gia ƒë√¨nh kh√°c...
            ],
            outdoor: [
                { name: "ƒê·ªët l·ª≠a kh√¥ng di√™m", priority: "critical", reason: "S∆∞·ªüi ·∫•m" },
                { name: "T√¨m n∆∞·ªõc trong r·ª´ng", priority: "critical", reason: "N∆∞·ªõc u·ªëng" }
                // Th√™m k·ªπ nƒÉng ph∆∞·ª£t kh√°c...
            ],
            financial: [
                { name: "Qu·∫£n l√Ω ti·ªÅn kh·∫©n c·∫•p", priority: "critical", reason: "∆Øu ti√™n chi" }
                // Th√™m k·ªπ nƒÉng t√†i ch√≠nh kh√°c...
            ],
            flood: [
                { name: "B∆°i c∆° b·∫£n", priority: "critical", reason: "Tho√°t l≈©" }
                // Th√™m k·ªπ nƒÉng l≈© l·ª•t kh√°c...
            ],
            storm: [
                { name: "Gia c·ªë c·ª≠a s·ªï", priority: "critical", reason: "Tr∆∞·ªõc b√£o" }
                // Th√™m k·ªπ nƒÉng b√£o kh√°c...
            ],
            landslide: [
                { name: "Nh·∫≠n bi·∫øt s·∫°t l·ªü", priority: "critical", reason: "Tho√°t s·ªõm" }
                // Th√™m k·ªπ nƒÉng s·∫°t l·ªü kh√°c...
            ],
            war: [
                { name: "T√¨m n∆°i tr√∫ ·∫©n", priority: "critical", reason: "Tr√°nh bom ƒë·∫°n" }
                // Th√™m k·ªπ nƒÉng chi·∫øn tranh kh√°c...
            ],
            evacuation: [
                { name: "Chu·∫©n b·ªã t√∫i kh·∫©n c·∫•p", priority: "critical", reason: "L·∫•y nhanh" }
                // Th√™m k·ªπ nƒÉng s∆° t√°n kh√°c...
            ],
            riot: [
                { name: "Tr√°nh xa ƒë√°m ƒë√¥ng", priority: "critical", reason: "An to√†n" }
                // Th√™m k·ªπ nƒÉng b·∫°o lo·∫°n kh√°c...
            ]
        };

        // ===== H·ªÜ TH·ªêNG - KH√îNG C·∫¶N CH·ªàNH S·ª¨A =====
        let checkedItems = JSON.parse(localStorage.getItem('checkedItems') || '{}');
        let currentScenario = 'all';
        let currentView = 'tools';

        function saveChecked() {
            localStorage.setItem('checkedItems', JSON.stringify(checkedItems));
        }

        function setView(view) {
            currentView = view;
            ['btnTools', 'btnSkills', 'btnAll'].forEach(id => {
                const btn = document.getElementById(id);
                const isActive = (id === 'btn' + view.charAt(0).toUpperCase() + view.slice(1)) || 
                                 (id === 'btnAll' && view === 'all');
                btn.className = isActive ? 
                    'px-4 py-2 rounded-lg font-medium transition-all bg-indigo-500 text-white' : 
                    'px-4 py-2 rounded-lg font-medium transition-all bg-white text-gray-700 border-2 border-gray-300';
            });
            renderContent();
        }

        function setScenario(scenario) {
            currentScenario = scenario;
            renderTabs();
            renderContent();
        }

        function toggleItem(type, category, index) {
            const key = `${type}-${category}-${index}`;
            checkedItems[key] = !checkedItems[key];
            saveChecked();
            renderContent();
        }

        function getPriorityBadge(priority) {
            const badges = {
                critical: { text: 'B·∫ÆT BU·ªòC', class: 'bg-red-100 text-red-700 border-red-300' },
                high: { text: 'QUAN TR·ªåNG', class: 'bg-orange-100 text-orange-700 border-orange-300' },
                medium: { text: 'N√äN C√ì', class: 'bg-yellow-100 text-yellow-700 border-yellow-300' },
                low: { text: 'T√ôY CH·ªåN', class: 'bg-gray-100 text-gray-600 border-gray-300' }
            };
            const badge = badges[priority];
            return `<span class="text-xs px-2 py-0.5 rounded border ${badge.class}">${badge.text}</span>`;
        }

        function getProgress(type, category) {
            const items = type === 'tools' ? tools[category] : skills[category];
            if (!items || items.length === 0) return 0;
            const checked = items.filter((_, idx) => checkedItems[`${type}-${category}-${idx}`]).length;
            return Math.round((checked / items.length) * 100);
        }

        function renderTabs() {
            const tabsHtml = `
                <button onclick="setScenario('all')" class="p-3 rounded-lg border-2 transition-all ${
                    currentScenario === 'all' ? 'bg-indigo-500 text-white' : 'bg-white text-gray-700 border-gray-300'
                }">
                    <div class="text-2xl mb-1">üåç</div>
                    <div class="text-xs font-medium">T·∫•t c·∫£</div>
                </button>
                ${Object.entries(scenarios).map(([key, s]) => `
                    <button onclick="setScenario('${key}')" class="p-3 rounded-lg border-2 transition-all ${
                        currentScenario === key ? `bg-${s.color}-500 text-white` : 'bg-white text-gray-700 border-gray-300'
                    }">
                        <div class="text-xs font-medium">${s.name}</div>
                    </button>
                `).join('')}
            `;
            document.getElementById('scenarioTabs').innerHTML = tabsHtml;
        }

        function renderSection(type, category, items) {
            if (!items || items.length === 0) return '';
            
            const typeLabel = type === 'tools' ? 'üõ†Ô∏è C√¥ng c·ª•' : 'üéØ K·ªπ nƒÉng';
            const typeColor = type === 'tools' ? 'indigo' : 'blue';
            const progress = getProgress(type, category);
            const checked = items.filter((_, idx) => checkedItems[`${type}-${category}-${idx}`]).length;

            return `
                <div class="bg-gradient-to-r from-${typeColor}-50 to-white p-3 rounded-lg mb-3">
                    <div class="flex items-center justify-between mb-2">
                        <h3 class="font-bold text-${typeColor}-700">${typeLabel}</h3>
                        <span class="text-sm text-${typeColor}-600">${checked}/${items.length}</span>
                    </div>
                    <div class="w-full bg-${typeColor}-200 rounded-full h-2 mb-3">
                        <div class="bg-${typeColor}-600 h-2 rounded-full transition-all" style="width: ${progress}%"></div>
                    </div>
                    <div class="space-y-2">
                        ${items.map((item, idx) => {
                            const key = `${type}-${category}-${idx}`;
                            const isChecked = checkedItems[key];
                            return `
                                <div class="border rounded-lg p-3 transition-all ${isChecked ? 'checked-item' : 'bg-white border-gray-200'}">
                                    <label class="flex items-start gap-3 cursor-pointer">
                                        <input type="checkbox" ${isChecked ? 'checked' : ''} 
                                            onchange="toggleItem('${type}', '${category}', ${idx})"
                                            class="mt-1 w-5 h-5 cursor-pointer">
                                        <div class="flex-1">
                                            <div class="flex items-center gap-2 mb-1 flex-wrap">
                                                ${getPriorityBadge(item.priority)}
                                                <span class="font-medium priority-${item.priority}">${item.name}</span>
                                            </div>
                                            <p class="text-sm text-gray-600"><strong>L√Ω do:</strong> ${item.reason}</p>
                                        </div>
                                    </label>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            `;
        }

        function renderContent() {
            const categories = currentScenario === 'all' ? Object.keys(scenarios) : [currentScenario];
            
            const contentHtml = categories.map(category => {
                const scenario = scenarios[category];
                const toolItems = tools[category] || [];
                const skillItems = skills[category] || [];
                
                let sectionsHtml = '';
                if (currentView === 'tools' || currentView === 'all') {
                    sectionsHtml += renderSection('tools', category, toolItems);
                }
                if (currentView === 'skills' || currentView === 'all') {
                    sectionsHtml += renderSection('skills', category, skillItems);
                }
                
                if (!sectionsHtml) return '';

                const totalItems = (currentView === 'all' ? toolItems.length + skillItems.length : 
                                   currentView === 'tools' ? toolItems.length : skillItems.length);
                const totalChecked = (currentView === 'all' || currentView === 'tools' ? 
                    toolItems.filter((_, idx) => checkedItems[`tools-${category}-${idx}`]).length : 0) +
                    (currentView === 'all' || currentView === 'skills' ? 
                    skillItems.filter((_, idx) => checkedItems[`skills-${category}-${idx}`]).length : 0);
                const totalProgress = totalItems > 0 ? Math.round((totalChecked / totalItems) * 100) : 0;

                return `
                    <div class="bg-white rounded-xl shadow-lg overflow-hidden scenario-card">
                        <div class="bg-gradient-to-r from-${scenario.color}-500 to-${scenario.color}-600 text-white p-4">
                            <div class="flex items-center justify-between mb-2">
                                <h2 class="text-xl font-bold">${scenario.name}</h2>
                                <div class="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">
                                    ${totalChecked} / ${totalItems}
                                </div>
                            </div>
                            <div class="w-full bg-white bg-opacity-20 rounded-full h-2">
                                <div class="bg-white h-2 rounded-full transition-all" style="width: ${totalProgress}%"></div>
                            </div>
                        </div>
                        <div class="p-4">${sectionsHtml}</div>
                    </div>
                `;
            }).join('');

            document.getElementById('content').innerHTML = contentHtml;
        }

        // Kh·ªüi t·∫°o
        renderTabs();
        setView('tools');
    </script>
</body>
</html>